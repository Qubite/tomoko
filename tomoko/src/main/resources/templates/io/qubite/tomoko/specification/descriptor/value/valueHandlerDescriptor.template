<@pp.dropOutputFile />
<#list config.prefixes as prefix>
<@pp.changeOutputFile name=prefix.name+"ValueHandlerDescriptor.java" />
<#assign parameters = (prefix.size > 0)>
package io.qubite.tomoko.specification.descriptor.value;

import io.qubite.tomoko.direct.DirectTree;
import io.qubite.tomoko.direct.Operations;
import io.qubite.tomoko.patch.CommandType;
import io.qubite.tomoko.patch.OperationDto;
import io.qubite.tomoko.path.Path;
import io.qubite.tomoko.specification.scanner.ParameterDescriptor;
import io.qubite.tomoko.specification.scanner.PathPattern;

import java.util.HashMap;
import java.util.Map;

/**
 * <p>
 * Contains whole information about the path, path parameters and the value type. Used to generate operations in a type safe way.
 * </p>
 * <p>
 * Parameters defined by the handler must be passed as arguments. For wildcard parameters a dummy value will be generated.
 * For regex parameters however it is not possible and so a value for such a parameter must be passed in the parameter map.
 * </p>
 * <p>
 * Operations generated this way can be parsed using the {@link io.qubite.tomoko.direct.DirectTreeParser}.
 * </p>
 *
<#if parameters><#list 1..prefix.size as index>
 * @param <${config.generics[index-1].code}> type of the ${config.generics[index-1].parameter} parameter
</#list></#if>
 * @param <V> type of the value object
 */
public class ${prefix.name}ValueHandlerDescriptor<<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code}, </#list></#if>V> {

    private final CommandType commandType;
    private final PathPattern path;
    <#if parameters><#list 1..prefix.size as index>
    private final ParameterDescriptor<${config.generics[index-1].code}> ${config.generics[index-1].parameter}ParameterDescriptor;
    </#list></#if>

    public ${prefix.name}ValueHandlerDescriptor(CommandType commandType, PathPattern path<#if parameters>, <#list 1..prefix.size as index>ParameterDescriptor<${config.generics[index-1].code}> ${config.generics[index-1].parameter}ParameterDescriptor<#sep>, </#list></#if>) {
        this.commandType = commandType;
        this.path = path;
        <#if parameters><#list 1..prefix.size as index>
        this.${config.generics[index-1].parameter}ParameterDescriptor = ${config.generics[index-1].parameter}ParameterDescriptor;
        </#list></#if>
    }

    /**
     * Creates an operation with a path generated according to the provided parameters and this descriptor.
     *
     * @throws IllegalArgumentException path cannot be generated as there is a missing value for one of the parameters
     <#if parameters><#list 1..prefix.size as index>
     * @param ${config.generics[index-1].parameter}Parameter
     </#list></#if>
     * @param value
     * @return
     */
    public OperationDto generate(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code} ${config.generics[index-1].parameter}Parameter, </#list></#if>V value) {
        return generate(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].parameter}Parameter, </#list></#if>value, new HashMap<>());
    }

    /**
     * Creates an operation with a path generated according to the provided parameters and this descriptor.
     *
     * @throws IllegalArgumentException path cannot be generated as there is a missing value for one of the parameters
     <#if parameters><#list 1..prefix.size as index>
     * @param ${config.generics[index-1].parameter}Parameter
     </#list></#if>
     * @param parameterMap
     * @param value
     * @return
     */
    public OperationDto generate(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code} ${config.generics[index-1].parameter}Parameter, </#list></#if>V value, Map<String, String> parameterMap) {
        return Operations.value(commandType, generatePath(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].parameter}Parameter, </#list></#if>parameterMap), DirectTree.of(value));
    }

    /**
     * <p>
     * Creates a {@link Path} instance using the provided parameter values.
     * </p>
     *
     * @throws IllegalArgumentException path cannot be generated as there is a missing value for one of the parameters
     <#if parameters><#list 1..prefix.size as index>
     * @param ${config.generics[index-1].parameter}Parameter
     </#list></#if>
     * @param parameterMap
     * @return
     */
    public Path generatePath(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code} ${config.generics[index-1].parameter}Parameter, </#list></#if>Map<String, String> parameterMap) {
        Map<String, String> copiedMap = new HashMap<>(parameterMap);
        <#if parameters><#list 1..prefix.size as index>
        copiedMap.put(${config.generics[index-1].parameter}ParameterDescriptor.getName(), ${config.generics[index-1].parameter}ParameterDescriptor.getParameterValue(${config.generics[index-1].parameter}Parameter));
        </#list></#if>
        return path.toPath(copiedMap);
    }

    /**
     * <p>
     * Creates a {@link Path} instance using the provided parameter values.
     * </p>
     *
     * @throws IllegalArgumentException path cannot be generated as there is a missing value for one of the parameters
     <#if parameters><#list 1..prefix.size as index>
     * @param ${config.generics[index-1].parameter}Parameter
     </#list></#if>
     * @return
     */
    public Path generatePath(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code} ${config.generics[index-1].parameter}Parameter<#sep>, </#list></#if>) {
        return generatePath(<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].parameter}Parameter, </#list></#if>new HashMap<>());
    }

}
</#list>