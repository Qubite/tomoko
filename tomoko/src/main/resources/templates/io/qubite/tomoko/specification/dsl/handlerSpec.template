<@pp.dropOutputFile />
<#list config.prefixes as prefix>
<@pp.changeOutputFile name=prefix.name+"HandlerSpec.java" />
<#assign parameters = (prefix.size > 0)>
package io.qubite.tomoko.specification.dsl;

import io.qubite.tomoko.handler.HandlerFactory;
import io.qubite.tomoko.path.PathTemplate;
import io.qubite.tomoko.specification.TreeSpecificationBuilder;
import io.qubite.tomoko.path.TypedPathParameter;
import io.qubite.tomoko.type.ValueType;

import ${prefix.consumer.fullName};

/**
 * Contains whole information about the path, path parameters and the value type. Allows registering an ADD or REPLACE handler.
 *
<#if parameters><#list 1..prefix.size as index>
 * @param <${config.generics[index-1].code}> type of the ${config.generics[index-1].parameter} path parameter
</#list></#if>
 * @param <V> type of the value object
 */
public class ${prefix.name}HandlerSpec<<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code}, </#list></#if>V> {

    private final HandlerFactory handlerFactory;
    private final TreeSpecificationBuilder builder;
    <#if parameters><#list 1..prefix.size as index>
    private final TypedPathParameter<${config.generics[index-1].code}> ${config.generics[index-1].parameter}ArgumentPath;
    </#list></#if>
    private final PathTemplate path;
    private final ValueType<V> valueType;

    ${prefix.name}HandlerSpec(HandlerFactory handlerFactory, TreeSpecificationBuilder builder, <#if parameters><#list 1..prefix.size as index>TypedPathParameter<${config.generics[index-1].code}> ${config.generics[index-1].parameter}ArgumentPath, </#list></#if>PathTemplate path, ValueType<V> valueType) {
        this.handlerFactory = handlerFactory;
        this.builder = builder;
        <#if parameters><#list 1..prefix.size as index>
        this.${config.generics[index-1].parameter}ArgumentPath = ${config.generics[index-1].parameter}ArgumentPath;
        </#list></#if>
        this.path = path;
        this.valueType = valueType;
    }

    /**
     * Registers a handler for the ADD operation.
     *
     * @param handler
     */
    public void handleAdd(${prefix.consumer.name}<<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code}, </#list></#if>V> handler) {
        builder.handleAdd(path, handlerFactory.handler(valueType, <#if parameters><#list 1..prefix.size as index>${config.generics[index-1].parameter}ArgumentPath, </#list></#if>handler));
    }

    /**
     * Registers a handler for the REPLACE operation.
     *
     * @param handler
     */
    public void handleReplace(${prefix.consumer.name}<<#if parameters><#list 1..prefix.size as index>${config.generics[index-1].code}, </#list></#if>V> handler) {
        builder.handleReplace(path, handlerFactory.handler(valueType, <#if parameters><#list 1..prefix.size as index>${config.generics[index-1].parameter}ArgumentPath, </#list></#if>handler));
    }

}
</#list>
